name: Version & Build & Deploy
on:
  workflow_call:
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-inputs-and-secrets-in-a-reusable-workflow
    inputs:
      releaseVersion:
        description: 'Release Version'
        required: true
        type: string
        # options:
        #   - major
        #   - minor
        #   - patch
        #   - release # Only valid on 'prerelease' environment
      preRelease:
        description: 'Pre-release'
        default: false
        required: false
        type: boolean

jobs:
  version:
    permissions:
      contents: write  # for Git to git push
    runs-on: ubuntu-latest
    outputs:
      original-commit-sha: ${{ github.sha }}
      version-change-commit-sha: ${{ steps.version-change-commit.outputs.sha }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true
          cache: 'npm'
      - name: Setup Git
        run: |
          git config user.name "DemosJarco"
          git config user.email "1209494+demosjarco@users.noreply.github.com"
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
      - run: npm version --sign-git-tag=true ${{ inputs.releaseVersion }} -m "[ci skip] Triggered build %s"
        if: ${{ inputs.preRelease == false }}
      - run: npm version --sign-git-tag=true pre${{ inputs.releaseVersion }} -m "[ci skip] Triggered build %s"
        if: ${{ inputs.preRelease == true }}
      - run: git push
      - run: git push --tags
      - name: Get commit sha for `build`
        run: echo "::set-output name=sha::$(git rev-parse HEAD)"
        id: version-change-commit

  build:
    needs: version
    runs-on: windows-latest
    strategy:
      # Still use matrix for ease of substituting values later on
      matrix:
        python-ver: ['3.x']
        node-ver: [lts/*]
        win-ver: [2004]
        win-build-ver: [19041]
        nodert-package-name: ['@nodert-win10-20h1/windows.devices.geolocation']
        arch: [ia32, x64, arm64]
        # type: [exe, msi]
        type: [exe]
    outputs:
      original-commit-sha: ${{ needs.version.outputs.original-commit-sha }}
      version-change-commit-sha: ${{ needs.version.outputs.version-change-commit-sha }}
    steps:
      - uses: actions/checkout@v3
        with:
          # Pass change commit to force git refresh
          ref: ${{ needs.version.outputs.version-change-commit-sha }}
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-ver }}
          check-latest: true
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-ver }}
          check-latest: true
          cache: 'npm'

      - uses: microsoft/setup-msbuild@v1.3
        with:
          msbuild-architecture: x64
      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.9
        with:
          sdk-version: ${{ matrix.win-build-ver }}
      # - uses: lukka/get-cmake@v.3.23.2
      # - name: Build new SDK
      #   shell: bash
      #   run: |
      #     cmake -DCMAKE_SYSTEM_VERSION=10.0.${{ matrix.win-build-ver }}.0
      #     cmake --build .

      - run: npm ci --fund=false
      - name: NodeRT Windows 10 ${{ matrix.win-ver }} (${{ matrix.win-ver }})
        run: npm install ${{ matrix.nodert-package-name }}
      - run: npm run rebuild
      
      # Build
      - run: npm run pack:win -- --arch=${{ matrix.arch }}
      - name: Generate compressed ${{ matrix.arch }}
        run: Compress-Archive -Path '.\builds\packaged\windows-auto-theme-win32-${{ matrix.arch }}' -DestinationPath '.\windows-auto-theme-${{ matrix.arch }}.zip' -CompressionLevel Optimal
        shell: powershell
      - name: Upload compressed ${{ matrix.arch }}
        uses: actions/upload-artifact@v3
        with:
          path: windows-auto-theme-${{ matrix.arch }}.zip
          if-no-files-found: error
      - name: Generate ${{ matrix.type }} for ${{ matrix.arch }} installer
        run: npm run inst:win ${{ matrix.arch }} ${{ matrix.type }}
      - name: Upload ${{ matrix.type }} for ${{ matrix.arch }} installer
        uses: actions/upload-artifact@v3
        with:
          path: builds/installers/windows-auto-theme-installer-${{ matrix.arch }}.${{ matrix.type }}
          if-no-files-found: error
      
      - name: Revert on fail
        if: ${{ failure() }}
        run: |
          git config user.name "DemosJarco"
          git config user.email "1209494+demosjarco@users.noreply.github.com"
          git push --delete origin $(git describe --tags --abbrev=0)
          git tag -d $(git describe --tags --abbrev=0)
          git revert --no-edit ${{ github.sha }}
          git push
        shell: bash

  deploy:
    permissions:
      contents: write  # for softprops/action-gh-release to create GitHub release
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ia32, x64, arm64]
        type: [exe]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - uses: actions/checkout@v3
        with:
          # Pass change commit to force git refresh
          ref: ${{ needs.build.outputs.version-change-commit-sha }}
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          fetch-depth: 0

      # Download artifact to publish
      - uses: actions/download-artifact@v3

      - name: Generate changelog from commit history
        run: echo "::set-output name=changelog::$(git log --no-decorate $(git describe --tags --abbrev=0)..HEAD --oneline)"
        id: get-changelog
        shell: bash
      - run: echo "${{ steps.get-changelog.outputs.changelog }}"

      - run: env

      # Upload Releases
      - name: Upload to Releases
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.get-changelog.outputs.changelog }}
          prerelease: ${{ inputs.preRelease }}
          files: |
            artifact/builds/installers/windows-auto-theme-installer-${{ matrix.arch }}.${{ matrix.type }}
            artifact/windows-auto-theme-${{ matrix.arch }}.zip
          fail_on_unmatched_files: true
          generate_release_notes: true
      
      - name: Revert on fail
        if: ${{ failure() }}
        run: |
          git config user.name "DemosJarco"
          git config user.email "1209494+demosjarco@users.noreply.github.com"
          git push --delete origin $(git describe --tags --abbrev=0)
          git tag -d $(git describe --tags --abbrev=0)
          git revert --no-edit ${{ needs.build.outputs.version-change-commit-sha }}
          git push origin HEAD:${{ github.head_ref || github.ref_name }}
        shell: bash